# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'bili.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import asyncio
import requests
import json
from PyQt5 import QtCore, QtGui, QtWidgets
import threading
import os
from you_get.common import *
from you_get.extractors.bilibili import *
import hashlib
#添加tqdm后打包文件增大了一倍
def download(url):
    #site = Bilibili()
    #download = site.download_by_url
    #download_playlist = site.download_playlist_by_url
    #bilibili_download = download
    print(url)
    a = Bilibili()
    download = a.download_by_url
    download_playlist = a.download_playlist_by_url
    print("开始下载了")
    try:
        a.download_by_url(url,COOKIES_FILE='cookies.sqlite',output_dir='video/%s'%(name),merge='y')
    except Exception as e:
        print(e)


async def run_in_executor(sync_func, *params):
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, sync_func, *params)


async def async_main(playlist):

    tasks = [run_in_executor(download, url) for url in playlist]

    for future in asyncio.as_completed(tasks):
        await future

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setEnabled(True)
        Dialog.resize(810, 774)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Dialog.sizePolicy().hasHeightForWidth())
        Dialog.setSizePolicy(sizePolicy)
        Dialog.setMinimumSize(QtCore.QSize(810, 774))
        Dialog.setMaximumSize(QtCore.QSize(810, 774))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        Dialog.setFont(font)
        self.frame_3 = QtWidgets.QFrame(Dialog)
        self.frame_3.setGeometry(QtCore.QRect(10, 50, 791, 61))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.frame_3)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(210, 10, 571, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pre_search = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pre_search.setFont(font)
        self.pre_search.setAutoDefault(True)
        self.pre_search.setDefault(False)
        self.pre_search.setFlat(False)
        self.pre_search.setObjectName("pre_search")
        self.pre_search.clicked.connect(self.pr_search)
        self.horizontalLayout_2.addWidget(self.pre_search)
        self.next_search = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.next_search.setMaximumSize(QtCore.QSize(381, 16777215))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.next_search.setFont(font)
        self.next_search.setAutoDefault(True)
        self.next_search.setObjectName("next_search")
        self.next_search.clicked.connect(self.n_search)
        self.horizontalLayout_2.addWidget(self.next_search)
        self.cur_page = QtWidgets.QSpinBox(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cur_page.sizePolicy().hasHeightForWidth())
        self.cur_page.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.cur_page.setFont(font)
        self.cur_page.setStyleSheet("background-color: rgb(85, 255, 127);")
        self.cur_page.setAlignment(QtCore.Qt.AlignCenter)
        self.cur_page.setMinimum(1)
        self.cur_page.setMaximum(999999999)
        self.cur_page.setProperty("value", 1)
        self.cur_page.setObjectName("cur_page")
        self.horizontalLayout_2.addWidget(self.cur_page)
        self.jump_search = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.jump_search.setFont(font)
        self.jump_search.setObjectName("jump_search")
        self.jump_search.clicked.connect(self.search)
        self.horizontalLayout_2.addWidget(self.jump_search)
        self.type_name = QtWidgets.QLabel(self.frame_3)
        self.type_name.setGeometry(QtCore.QRect(10, 10, 91, 41))
        font = QtGui.QFont()
        font.setFamily("Microsoft PhagsPa")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.type_name.setFont(font)
        self.type_name.setStyleSheet("")
        self.type_name.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.type_name.setFrameShadow(QtWidgets.QFrame.Plain)
        self.type_name.setScaledContents(False)
        self.type_name.setAlignment(QtCore.Qt.AlignCenter)
        self.type_name.setWordWrap(False)
        self.type_name.setIndent(-1)
        self.type_name.setObjectName("type_name")
        self.tid_name = QtWidgets.QComboBox(self.frame_3)
        self.tid_name.setGeometry(QtCore.QRect(100, 20, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.tid_name.setFont(font)
        self.tid_name.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tid_name.setAutoFillBackground(False)
        self.tid_name.setStyleSheet("color: rgb(0, 255, 0);\n"
"color: rgb(255, 1, 5);")
        self.tid_name.setEditable(False)
        self.tid_name.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.tid_name.setObjectName("tid_name")
        self.tid_name.addItem("")
        self.tid_name.activated.connect(self.tid_change)
        self.up_count = QtWidgets.QLabel(Dialog)
        self.up_count.setGeometry(QtCore.QRect(310, 10, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Microsoft PhagsPa")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.up_count.setFont(font)
        self.up_count.setStyleSheet("")
        self.up_count.setScaledContents(False)
        self.up_count.setAlignment(QtCore.Qt.AlignCenter)
        self.up_count.setWordWrap(False)
        self.up_count.setIndent(-1)
        self.up_count.setObjectName("up_count")
        self.upcount = QtWidgets.QLineEdit(Dialog)
        self.upcount.setGeometry(QtCore.QRect(420, 10, 121, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.upcount.sizePolicy().hasHeightForWidth())
        self.upcount.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.upcount.setFont(font)
        self.upcount.setFocusPolicy(QtCore.Qt.NoFocus)
        self.upcount.setStyleSheet("background-color: rgb(0, 255, 127);")
        self.upcount.setAlignment(QtCore.Qt.AlignCenter)
        self.upcount.setObjectName("upcount")
        self.uidtext = QtWidgets.QLabel(Dialog)
        self.uidtext.setGeometry(QtCore.QRect(10, 10, 121, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.uidtext.sizePolicy().hasHeightForWidth())
        self.uidtext.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.uidtext.setFont(font)
        self.uidtext.setAlignment(QtCore.Qt.AlignCenter)
        self.uidtext.setObjectName("uidtext")
        self.uid = QtWidgets.QLineEdit(Dialog)
        self.uid.setGeometry(QtCore.QRect(140, 10, 129, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.uid.sizePolicy().hasHeightForWidth())
        self.uid.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.uid.setFont(font)
        self.uid.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.uid.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.uid.setStyleSheet("background-color: rgb(0, 255, 127);")
        self.uid.setInputMask("")
        self.uid.setText("")
        self.uid.setAlignment(QtCore.Qt.AlignCenter)
        self.uid.setClearButtonEnabled(False)
        self.uid.setObjectName("uid")
        self.p_count = QtWidgets.QLabel(Dialog)
        self.p_count.setGeometry(QtCore.QRect(570, 10, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Microsoft PhagsPa")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setKerning(True)
        self.p_count.setFont(font)
        self.p_count.setStyleSheet("")
        self.p_count.setScaledContents(False)
        self.p_count.setAlignment(QtCore.Qt.AlignCenter)
        self.p_count.setWordWrap(False)
        self.p_count.setIndent(-1)
        self.p_count.setObjectName("p_count")
        self.pcount = QtWidgets.QLineEdit(Dialog)
        self.pcount.setGeometry(QtCore.QRect(660, 10, 111, 31))
        self.pcount.setText(str(0))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pcount.setFont(font)
        self.pcount.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pcount.setStyleSheet("background-color: rgb(0, 255, 127);")
        self.pcount.setAlignment(QtCore.Qt.AlignCenter)
        self.pcount.setObjectName("pcount")
        self.frame_2 = QtWidgets.QFrame(Dialog)
        self.frame_2.setGeometry(QtCore.QRect(10, 159, 791, 591))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.vlist = QtWidgets.QTableView(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.vlist.setFont(font)
        self.vlist.setStyleSheet("background-color: rgb(144, 255, 179);")
        self.vlist.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.vlist.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.vlist.setObjectName("vlist")
        self.vlist.doubleClicked.connect(self.vlist_change)
        self.model = QtGui.QStandardItemModel(0,2)
        self.model.setHorizontalHeaderLabels(['AV号','BV号','视频标题'])
        self.vlist.setModel(self.model)
        self.horizontalLayout_3.addWidget(self.vlist)
        self.dlist = QtWidgets.QTableView(self.frame_2)
        self.dlist.setMaximumSize(QtCore.QSize(810, 774))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.dlist.setFont(font)
        self.dlist.setStyleSheet("background-color: rgb(144, 255, 179);")
        self.dlist.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.dlist.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.dlist.setObjectName("dlist")
        self.dlist.doubleClicked.connect(self.dlist_change)
        self.dmodel = QtGui.QStandardItemModel(0,2)
        self.dmodel.setHorizontalHeaderLabels(['AV号','BV号','视频标题'])
        self.dlist.setModel(self.dmodel)
        self.horizontalLayout_3.addWidget(self.dlist)
        self.frame = QtWidgets.QFrame(Dialog)
        self.frame.setGeometry(QtCore.QRect(10, 110, 791, 51))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.frame.setObjectName("frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.search_list = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.search_list.sizePolicy().hasHeightForWidth())
        self.search_list.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.search_list.setFont(font)
        self.search_list.setStyleSheet("background-color: rgb(85, 170, 255);")
        self.search_list.setObjectName("search_list")
        self.search_list.clicked.connect(self.search)
        self.horizontalLayout.addWidget(self.search_list)
        self.down_list = QtWidgets.QPushButton(self.frame)
        self.down_list.setMaximumSize(QtCore.QSize(381, 16777215))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.down_list.setFont(font)
        self.down_list.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.down_list.setStyleSheet("background-color: rgb(0, 255, 255);")
        self.down_list.setAutoDefault(True)
        self.down_list.setObjectName("down_list")
        self.down_list.clicked.connect(self.main)
        self.horizontalLayout.addWidget(self.down_list)
        self.tid=''
        self.last_uid=''
        self.tdic={'全部':''}
        self.pagecount=0
        self.playlist=set()
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowIcon(QtGui.QIcon("ICO.ico"))
        Dialog.setWindowTitle(_translate("Dialog", "BILIBILI下载"))
        self.pre_search.setText(_translate("Dialog", "上一页"))
        self.next_search.setText(_translate("Dialog", "下一页"))
        self.jump_search.setText(_translate("Dialog", "跳转"))
        self.type_name.setText(_translate("Dialog", "分区类型："))
        self.tid_name.setItemText(0, _translate("Dialog", "全部"))
        self.up_count.setText(_translate("Dialog", "上传总数："))
        self.uidtext.setText(_translate("Dialog", "up的id号:"))
        self.uid.setPlaceholderText(_translate("Dialog", "up主id"))
        self.p_count.setText(_translate("Dialog", "总页数："))
        self.search_list.setText(_translate("Dialog", "查询视频列表"))
        self.down_list.setText(_translate("Dialog", "开始下载"))



    def tid_change(self):
        print("分区改变了")
        self.tid=self.tdic[self.tid_name.currentText()]
        self.cur_page.setValue(1)
        self.search()
    def vlist_change(self,index):
        text=[index.data() for index in self.vlist.selectedIndexes()]
        print(text)
        if text[1] not in self.playlist:
            self.dmodel.appendRow([QtGui.QStandardItem(i) for i in text])
            self.playlist.add(text[1])
            print(self.playlist)
        else:
            msg_box = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, '重复添加', '该视频已在下载列表')
            msg_box.exec_()
            print(self.playlist)
    def dlist_change(self,index):
        text=[index.data() for index in self.dlist.selectedIndexes()]
        print(text)
        self.dmodel.removeRow(index.row())
        self.playlist.remove(text[1])
        print(self.playlist)
    def search(self):
        global name
        tmp=self.uid.text()
        if self.last_uid!=tmp:
            self.tid=''
            self.tid_name.setCurrentText('全部')
            self.cur_page.setValue(1)
        search_url="https://api.bilibili.com/x/space/arc/search?mid=%s&pn=%s&ps=20&tid=%s&jsonp=jsonp"%(self.uid.text(),self.cur_page.value(),self.tid)
        info_url="https://api.bilibili.com/x/space/acc/info?mid=%s&jsonp=jsonp"%(self.uid.text())
        try:
            res = requests.get(search_url)
        except Exception:
            print("断网了")
            msg_box = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, '断网了', '请检查网络是否连接')
            msg_box.exec_()
            return
        if json.loads(requests.get(info_url).text)['code']!=0:
            msg_box = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, '出错了', '请核对uid和分区')
            msg_box.exec_()
            return
        info=json.loads(requests.get(info_url).text)['data']
        if json.loads(res.text)['data']['page']['count']==0:
            msg_box = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, '懒啊', '该up未上传过视频')
            msg_box.exec_()
            return
        data=json.loads(res.text)['data']
        name,count,vlist,tlist='['+info['name']+'-'+str(self.uid.text())+']/'+self.tid_name.currentText(),data['page']['count'],data['list']['vlist'],list(data['list']['tlist'].values())
        print(name,count)
        print(tlist)
        if self.last_uid!=tmp:
            self.last_uid=tmp
            self.tid_name.clear()
            self.tid_name.addItem('全部')
            self.tdic={'全部':''}
            for i in tlist:
                self.tdic[i['name']]=str(i['tid'])
                self.tid_name.addItem(i['name'])
        #print(self.tdic)
        self.upcount.setText(str(count))
        pcount=count//20 if count%20==0 else count//20+1
        self.pagecount=pcount
        self.pcount.setText(str(pcount))
        self.cur_page.setMaximum(pcount)
        print("视频总页数是",pcount)
        print(self.model.rowCount())
        self.model.clear()
        self.dmodel.clear()
        self.playlist=set()
        self.model.setHorizontalHeaderLabels(['AV号','BV号','视频标题'])
        self.dmodel.setHorizontalHeaderLabels(['AV号','BV号','视频标题'])
        #print(json.dumps(dir(self.model)))
        for row in range(len(vlist)):
            item = QtGui.QStandardItem("%s"%(vlist[row]['aid']))
            self.model.setItem(row,0,item)
            self.dmodel.setItem(row,0,QtGui.QStandardItem("%s"%(vlist[row]['aid'])))
            item = QtGui.QStandardItem("%s"%(vlist[row]['bvid']))
            self.model.setItem(row,1,item)
            self.dmodel.setItem(row,1,QtGui.QStandardItem("%s"%(vlist[row]['bvid'])))
            item = QtGui.QStandardItem("%s"%(vlist[row]['title']))
            self.model.setItem(row,2,item)
            self.dmodel.setItem(row,2,QtGui.QStandardItem("%s"%(vlist[row]['title'])))
            self.playlist.add(vlist[row]['bvid'])
    def n_search(self):
        if self.cur_page.value()==self.pagecount:
            return
        self.cur_page.setValue(self.cur_page.value()+1)
        print(self.cur_page.value())
        self.search()
    def pr_search(self):
        if self.cur_page.value()==1:
            return 
        print(self.cur_page.value())
        self.cur_page.setValue(self.cur_page.value()-1)
        print(self.cur_page.value())
        self.search()
    def main(self):
        if self.playlist==set():
            msg_box = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, '搞事情啊', '下载列表为空')
            msg_box.exec_()
            return
        t=threading.Thread(target=self.main1)
        t.start()
    def main1(self):
        if not os.path.exists('video/%s'%(name)):
            os.makedirs('video/%s'%(name))
        base_url='https://www.bilibili.com/video/'
        playlist=[]
        for i in self.playlist:
            playlist.append(base_url+i)
        print(playlist)
        asyncio.run(async_main(playlist))
        print('下载完成')



if __name__ == "__main__":
    import sys
    name=''
    app = QtWidgets.QApplication(sys.argv)
    Dialog =QtWidgets.QMainWindow()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())